# ðŸ“Œ Full-Stack To-Do List Project

<details>
<summary>Beginner</summary>

- [ ] Setup project with `index.html`, `style.css`, `script.js`
- [ ] Create UI: input, button, list container
- [ ] Add task (update DOM)
- [ ] Delete task (remove from DOM)
- [ ] Edit task (inline edit/save)
- [ ] Style with CSS (responsive, hover effects)

</details>

<details>
<summary>Intermediate</summary>

- [ ] Setup project structure: `client/` (React) + `server/` (Express)
- [ ] Backend: install `express`, `cors`, `nodemon`; setup `server.js`
- [ ] API routes: `GET/POST/PUT/DELETE /tasks` (in-memory array)
- [ ] React: create components (`App`, `TaskList`, `TaskItem`, `TaskForm`)
- [ ] Fetch tasks from backend (axios/fetch)
- [ ] Handle Add/Edit/Delete/Complete actions
- [ ] Style with CSS/Tailwind/Bootstrap

</details>

<details>
<summary>Advanced</summary>

**Database**
- [ ] Install & configure DB (MongoDB, PostgreSQL, or SQLite)
- [ ] Create `Task` model (`id, userId, text, completed, createdAt, updatedAt`)
- [ ] Replace array with DB queries

**Authentication**
- [ ] Create `User` model
- [ ] Register/Login routes (`bcrypt`, JWT or sessions)
- [ ] Auth middleware to protect routes

**Multi-User Support**
- [ ] Each task linked to `userId`
- [ ] Only return logged-in userâ€™s tasks

**Advanced Features**
- [ ] Filtering (completed/active)
- [ ] Searching (by keyword)
- [ ] Sorting (date/text)
- [ ] Pagination (`page, limit`)

**Deployment**
- [ ] Deploy backend (Render/Heroku/Railway)
- [ ] Deploy frontend (Netlify/Vercel)
- [ ] Connect deployed frontend â†” backend

**TypeScript / Next.js**
- [ ] Add types/interfaces (`Task`, `User`, API responses)
- [ ] Convert backend & frontend to TS (`.ts/.tsx`)
- [ ] OR migrate to Next.js with API routes & NextAuth.js
- [ ] Deploy to Vercel for production

</details>
